scalar BigInt

type YieldDex_FeeRecipient {
  id: ID!
  recipient: String!
}

type YieldDex_L1ReportHash {
  id: ID!
  hash: String!
}

type YieldDex_StrategyRegistered {
  id: ID!
  tokenManager: String!
  token: String!
  l1Strategy: String!
  underlying: String!
  performanceFees: String!
  minDeposit: String!
  maxDeposit: String!
  minWithdrawal: String!
  maxWithdrawal: String!
}

type YieldDex_DepositLimitUpdated {
  id: ID!
  l1Strategy: String!
  newMinDepositLimit: String!
  newMaxDepositLimit: String!
}

type YieldDex_WithdrawLimitUpdated {
  id: ID!
  l1Strategy: String!
  newMinWithdrawLimit: String!
  newMaxWithdrawLimit: String!
}

type YieldDex_PerformanceFeeUpdated {
  id: ID!
  l1Strategy: String!
  newPerfomanceFees: String!
}

type YieldDex_WithdrawalEpochUpdated {
  id: ID!
  l1Strategy: String!
  newWithdrawalEpochDelay: String!
}

type YieldDex_DustLimitUpdated {
  id: ID!
  l1Strategy: String!
  newDustLimit: String!
}

type YieldDex_Deposit {
  id: ID!
  l1Strategy: String!
  caller: String!
  receiver: String!
  assets: String!
  shares: String!
  referal: String!
  timestamp: Int!
}

type YieldDex_RequestWithdrawal {
  id: ID!
  l1Strategy: String!
  caller: String!
  assets: String!
  shares: String!
  withdrawalId: String!
  epoch: String!
  timestamp: Int!
}

type YieldDex_ClaimWithdrawal {
  id: ID!
  l1Strategy: String!
  caller: String!
  claimId: String!
  underlyingAmount: String!
  timestamp: Int!
}

type YieldDex_BridgeInteractionInfo {
  id: ID!
  l1Bridge: String!
  amount: String!
  timestamp: Int!
}

type YieldDex_StrategyL2Report {
  id: ID!
  l1Strategy: String!
  actionId: String!
  amount: String!
  newSharePrice: String!
  timestamp: Int!
}

type YieldDex_NewL2Report {
  id: ID!
  hash: String!
  timestamp: Int!
  blockNumber: Int!
  newEpoch: String!
  newBridgeDeposit: [YieldDex_BridgeInteractionInfo!]
  newL2Report: [YieldDex_StrategyL2Report!]
  newBridgeWithdraw: [YieldDex_BridgeInteractionInfo!]
}

type Liquity_Batch {
  id: ID!
  hash: String!
  address: String!
  block: Int!
  nonce: Int!
  amountA: String!
  amountB: String!
  timestamp: Int!
}

type YieldDex_TM_Transfer {
  id: ID!
  constractAddress: String!
  from: String!
  to: String!
  value: String!
  timestamp: Int!
}

type YieldDex_TM_balanceOf {
  id: ID!
  balance: String!
}

type YieldDex_TM_holders {
  id: ID!
  holders: Int!
}