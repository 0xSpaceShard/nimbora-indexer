scalar BigInt

type fee_recipient {
  id: ID!
  recipient: String!
}

type l1_report_hash {
  id: ID!
  hash: String!
}

type strategy_registered {
  id: ID!
  tokenManager: String!
  token: String!
  l1Strategy: String!
  underlying: String!
  performanceFees: String!
  minDeposit: String!
  maxDeposit: String!
  minWithdrawal: String!
  maxWithdrawal: String!
}

type deposit_limit_updated {
  id: ID!
  l1Strategy: String!
  newMinDepositLimit: String!
  newMaxDepositLimit: String!
}

type withdraw_limit_updated {
  id: ID!
  l1Strategy: String!
  newMinWithdrawLimit: String!
  newMaxWithdrawLimit: String!
}

type performance_fee_updated {
  id: ID!
  l1Strategy: String!
  newPerfomanceFees: String!
}

type withdrawal_epoch_updated {
  id: ID!
  l1Strategy: String!
  newWithdrawalEpochDelay: String!
}

type dust_limit_updated {
  id: ID!
  l1Strategy: String!
  newDustLimit: String!
}

type deposit {
  id: ID!
  l1Strategy: String!
  caller: String!
  receiver: String!
  assets: String!
  shares: String!
  referal: String!
}

type request_withdrawal {
  id: ID!
  l1Strategy: String!
  caller: String!
  assets: String!
  shares: String!
  withdrawalId: String!
  epoch: String!
}

type claim_withdrawal {
  id: ID!
  l1Strategy: String!
  caller: String!
  claimId: String!
  underlyingAmount: String!
}

type bridge_interaction_info {
  id: ID!
  l1Bridge: String!
  amount: String!
}

type strategy_l2_report {
  id: ID!
  l1Strategy: String!
  actionId: String!
  amount: String!
  newSharePrice: String!
}

type new_l2_report {
  id: ID!
  timestamp: Int!
  blockNumber: Int!
  newEpoch: String!
  newBridgeDeposit: [bridge_interaction_info!]
  newL2Report: [strategy_l2_report!]
  newBridgeWithdraw: [bridge_interaction_info!]
}
