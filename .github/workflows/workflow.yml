name: build-deploy

on:
  push:
    branches:
      - main
      - develop

env:
  working-directory: .
  DOCKER_IMAGE: spaceshard/nimbora-yielddex-indexer

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install dependencies
        run: yarn install
      - name: Docker Build image
        run: docker build . -t ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker Push image
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            docker tag ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }} ${{ env.DOCKER_IMAGE }}:latest
            docker push ${{ env.DOCKER_IMAGE }}:latest
          fi
          docker push ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref_name == ${{ github.ref_name }}
    steps:
      - name: Deploy the service to "${{ github.ref_name }}"
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets[format('SSH_HOST_{0}', github.ref_name)] }}
          username: ${{ secrets[format('SSH_USER_{0}', github.ref_name)] }}
          key: ${{ secrets[format('SSH_PRIVATE_KEY_{0}', github.ref_name)] }}
          port: ${{ secrets[format('SSH_PORT_{0}', github.ref_name)] }}
          script: |
            SSH_NESTED_HOST="${{ secrets[format('SSH_NESTED_HOST_{0}', github.ref_name)] }}"
            ssh $SSH_NESTED_HOST -T <<EOA
              echo "### Deployment started"
              if [ -d "${{ secrets.BASE_PATH }}/${{ github.repository }}-${{ github.ref_name }}" ]; then
                  cd ${{ secrets.BASE_PATH }}/${{ github.repository }}-${{ github.ref_name }} && \
                  echo "### Generate ENV file"
                  > .env

                  echo BRANCH=${{ github.ref_name }} >> .env
                  echo NETWORK=${{ secrets[format('NETWORK_{0}', github.ref_name)] }} >> .env
                  echo L2_ALCHEMY_RPC_URL=${{ secrets[format('L2_ALCHEMY_RPC_URL_{0}', github.ref_name)] }} >> .env
                  echo INDEXER_PORT=${{ secrets[format('INDEXER_PORT_{0}', github.ref_name)] }} >> .env
                  echo METRICS_PORT=${{ vars[format('METRICS_PORT_{0}', github.ref_name)] }} >> .env
                  echo GRAPHQL_PORT=${{ vars[format('GRAPHQL_PORT_{0}', github.ref_name)] }} >> .env
                  echo DATABASE_URL=${{ secrets[format('DATABASE_URL_{0}', github.ref_name)] }} >> .env
                  echo DATABASE_NAME=${{ secrets[format('DATABASE_NAME_{0}', github.ref_name)] }} >> .env
                  echo NODE_ENV=${{ vars[format('NODE_ENV_{0}', github.ref_name)] }} >> .env
                  echo DATA_CONNECTOR_AGENT_PORT=${{ vars[format('DATA_CONNECTOR_AGENT_PORT_{0}', github.ref_name)] }} >> .env
                  
                  git fetch && \
                  git checkout ${{ github.ref_name }} && \
                  git reset --hard origin/${{ github.ref_name }} && \
                  docker-compose -f docker-compose.yml pull ${{ vars[format('SERVICES_{0}', github.ref_name)] }} && \
                  docker-compose -f docker-compose.yml up -d --build  ${{ vars[format('SERVICES_{0}', github.ref_name)] }}
              else
                  echo "Directory does not exist, aborting script."
                  exit 1
              fi
            EOA